body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #f9faff;
  color: #333;
  margin: 0;
  padding: 0;
}

header {
  background: linear-gradient(to right, #6a11cb, #2575fc);
  color: white;
  padding: 1rem;
  text-align: center;
}

nav {
  margin-top: 0.5rem;
}

nav button {
  margin: 0 6px;
  padding: 8px 12px;
  background-color: white;
  border: none;
  border-radius: 5px;
  font-weight: bold;
  cursor: pointer;
}

nav button:hover {
  background-color: #eee;
}

main {
  padding: 1rem;
}

.controls {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 1rem;
}

.sliders {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-bottom: 1rem;
}

.text-box {
  border: 1px solid #ccc;
  padding: 1rem;
  min-height: 400px;
  max-height: 70vh;
  overflow-y: auto;
  background-color: #ffffff;
  border-radius: 8px;
}

.sentence {
  padding: 2px;
  transition: background 0.3s ease;
}

.highlight {
  background-color: #ffeb3b;
}

footer {
  text-align: center;
  padding: 1rem;
  background-color: #f0f0f0;
  margin-top: 2rem;
}
✅ script.js
javascript
Copy
Edit
let utterance;
let currentSentenceIndex = 0;
let sentences = [];
let isLooping = false;

window.addEventListener("DOMContentLoaded", () => {
  const lastText = localStorage.getItem("lastText");
  if (lastText) displayText(lastText);
});

function loadFile() {
  const fileInput = document.getElementById("fileInput");
  const file = fileInput.files[0];
  if (!file) return alert("No file selected.");

  const reader = new FileReader();
  reader.onload = () => {
    const text = reader.result;
    localStorage.setItem("lastText", text);
    displayText(text);
  };

  if (file.type === "application/pdf") {
    alert("📄 PDF support coming soon.");
    return;
  }

  reader.readAsText(file);
}

function displayText(text) {
  sentences = text.split(/(?<=[.?!])\s+/);
  const html = sentences.map((s, i) => `<span class="sentence" data-index="${i}">${s}</span>`).join(" ");
  document.getElementById("text-display").innerHTML = html;
}

function highlightSentence(index) {
  document.querySelectorAll(".sentence").forEach((el, i) =>
    el.classList.toggle("highlight", i === index)
  );
}

function play() {
  if (!sentences.length) {
    alert("Please load a document first.");
    return;
  }

  const rate = parseFloat(document.getElementById("rate").value);
  const pitch = parseFloat(document.getElementById("pitch").value);

  if (utterance && speechSynthesis.paused) {
    speechSynthesis.resume();
    return;
  }

  speakSentence(currentSentenceIndex, rate, pitch);
}

function speakSentence(index, rate, pitch) {
  if (index >= sentences.length) {
    if (isLooping) {
      currentSentenceIndex = 0;
      speakSentence(currentSentenceIndex, rate, pitch);
    } else {
      stop();
    }
    return;
  }

  highlightSentence(index);
  utterance = new SpeechSynthesisUtterance(sentences[index]);
  utterance.rate = rate;
  utterance.pitch = pitch;

  utterance.onend = () => {
    currentSentenceIndex++;
    speakSentence(currentSentenceIndex, rate, pitch);
  };

  speechSynthesis.speak(utterance);
}

function pause() {
  if (speechSynthesis.speaking) {
    speechSynthesis.pause();
  }
}

function stop() {
  speechSynthesis.cancel();
  currentSentenceIndex = 0;
  highlightSentence(-1);
}

function toggleLoop() {
  isLooping = !isLooping;
  alert("Looping is now " + (isLooping ? "enabled" : "disabled"));
}

function translateText() {
  alert("🌍 Translation feature coming soon.");
}

function navigate(tab) {
  alert(`📌 Navigation to "${tab}" not implemented yet.`);
}
